function J = fcn_Jaco_dp_2_dq(q)
% differential kinematics (forward direction)
% J: Jacobian that maps from actuator velocities to joint velocities
% dp --> dq, 5x5 matrix
% dp: vector of actuator (angular) velocities - after reduction (5x1)
% dq: vector of joint (angular) velocities (5x1)

p_ = fcn_ik_q_2_p(q);
alpha_ = fcn_q5_2_alpha(q(5));
beta_ = fcn_q5_2_beta(q(5));
lambda_ = fcn_alphabeta2_lambda(alpha_, beta_);


J_q_hip = (zeros(2,2));
J_q_hip(1,1) = ...
    (49*sin(q(2)))/5000 - (399*cos(q(2)))/20000 - (7*cos(q(2))*sin(p_(2)))/625 + ...
    (7*cos(q(2))*sin(q(3)))/625 + (57*sin(q(2))*sin(q(3)))/2500 + ...
    (8*sin(p_(2))*sin(q(2))*sin(q(3)))/625;
J_q_hip(1,2) = ...
    (8*cos(p_(2))*sin(q(3)))/625 - ...
    (57*cos(q(2))*cos(q(3)))/2500 + (7*cos(q(3))*sin(q(2)))/625 - ...
    (8*cos(q(2))*cos(q(3))*sin(p_(2)))/625;
J_q_hip(2,1) = ...
    (399*cos(q(2)))/20000 + (49*sin(q(2)))/5000 + (7*cos(q(2))*sin(p_(3)))/625 - ...
    (7*cos(q(2))*sin(q(3)))/625 + (57*sin(q(2))*sin(q(3)))/2500 + ...
    (8*sin(p_(3))*sin(q(2))*sin(q(3)))/625;
J_q_hip(2,2) = ...
    (8*cos(p_(3))*sin(q(3)))/625 - (57*cos(q(2))*cos(q(3)))/2500 - ...
    (7*cos(q(3))*sin(q(2)))/625 - (8*cos(q(2))*cos(q(3))*sin(p_(3)))/625;
 
J_p_hip = (zeros(2,2));
J_p_hip(1,1) = ...
    (57*cos(p_(2)))/2500 - (7*cos(p_(2))*sin(q(2)))/625 + (8*cos(q(3))*sin(p_(2)))/625 - ...
    (8*cos(p_(2))*cos(q(2))*sin(q(3)))/625; ...
J_p_hip(2,2) = ...
    (57*cos(p_(3)))/2500 + (7*cos(p_(3))*sin(q(2)))/625 + ...
    (8*cos(q(3))*sin(p_(3)))/625 - (8*cos(p_(3))*cos(q(2))*sin(q(3)))/625;
 
J_dp_2_dq_hip = -J_q_hip\J_p_hip;

J = zeros(5,5);
J(1, 1) = 1;
J(2:3, 2:3) = J_dp_2_dq_hip;
J(4, 4) = .5;
J(4, 5) = .5;
J(5, 4) = lambda_/2;
J(5, 5) = -lambda_/2;

end