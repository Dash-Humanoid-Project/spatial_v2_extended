function robot = tello_w_rotors_w_parallel
% WORK IN PROGRESS
% WORK IN PROGRESS
% WORK IN PROGRESS
% WORK IN PROGRESS




% NOTE 1: Featherstone v2 style rigid body model for tello model including 
% torso, both legs, rotors AND links that complete parallel actuation 
% such as 4-bar linkages or parallelogram.

% NOTE 2: Inertial parameters are stored in 
% 'inertial_params_X_partname.txt'. These text files are manually generated 
% from solidworks. 

% NOTE 3: Following cases are added to jcalc
%     case '-Rx'
%         Xj = rotx(q);
%         S = [-1;0;0;0;0;0];
%     case '-Ry'				% revolute Y axis
%         Xj = roty(-q);
%         S = [0;-1;0;0;0;0];
%     case '-Rz'			% revolute Z axis
%         Xj = rotz(-q);
%         S = [0;0;-1;0;0;0];

% NOTE4: body ordering: (world: 0)
% torso:        1
% left limb:    2, 3, 4, 5, 6

% left rotors:  7, 8, 9, 10, 11


% number of bodies
robot.NB = 1+5+5+5+5+2+2+2+2; 

% tree structure
robot.parent = [0, ...
                1, 2, 3, 4, 5, ...
                1, 2, 2, 4, 4, ...
                1, 12, 13, 14, 15, ...
                1, 12, 12, 14, 14, ...
                2, 2, 3, 24, ...
                12, 12, 13, 28];


% joint types
robot.jtype = { 'Rz', ...
                'Rz', 'Rx', 'Ry', 'Ry', 'Ry', ...
                '-Rz', 'Rz', '-Rz', '-Rz', 'Rz' ...
                'Rz', 'Rx', 'Ry', 'Ry', 'Ry', ...
                '-Rz', 'Rz', '-Rz', '-Rz', 'Rz', ...
                'Rz', '-Rz', 'Ry', 'Ry',...
                'Rz', '-Rz', 'Ry', 'Ry'};


% joint orientations
R2 = [  -1, 0, 0; ...
        0, 0, 1; ...
        0, 1, 0]; 
R3 = [  1, 0, 0; ...
        0, 0, -1; ...
        0, 1, 0];
R4 = R3;
R5 = R2;
R6 = [-1, 0, 0; 0, 0, -1; 0, -1, 0];
R7 = ry(-40/180*pi);


% joint tree transformations
robot.Xtree = { eye(6), ...
                plux(eye(3), [0, 126, -87]*1E-3), ...
                plux(eye(3), [0, 0, -142.5]*1E-3), ...
                plux(eye(3), [0,0,0]*1E-3), ...
                plux(eye(3), [0, 0, -226.8]*1E-3), ...
                plux(eye(3), [0, 0, -260]*1E-3), ...
                ...
                plux(eye(3), [0, 126, -26]*1E-3), ...
                plux(R2, [0, 40, 0]*1E-3), ...
                plux(R2, [0, -40, 0]*1E-3), ...
                plux(R2, [0, 26.55, 0]*1E-3), ...
                plux(R2, [0, -26.55, 0]*1E-3), ...
                ...
                plux(eye(3), [0, -126, -87]*1E-3), ...
                plux(eye(3), [0, 0, -142.5]*1E-3), ...
                plux(eye(3), [0,0,0]*1E-3), ...
                plux(eye(3), [0, 0, -226.8]*1E-3), ...
                plux(eye(3), [0, 0, -260]*1E-3) ...
                ...
                plux(eye(3), [0, -126, -26]*1E-3), ...
                plux(R2, [0, 40, 0]*1E-3), ...
                plux(R2, [0, -40, 0]*1E-3), ...
                plux(R2, [0, 26.55, 0]*1E-3), ...
                plux(R2, [0, -26.55, 0]*1E-3), ...
                ...
                plux(R2, [0, 0, 0]*1E-3), ...
                plux(R6, [0, 0, 0]*1E-3), ...
                plux(eye(3), [0, 0, 0]*1E-3), ...
                plux(eye(3), [-sin(20/180*pi)*42, 0, -cos(20/180*pi)*42]*1E-3), ...
                ...
                plux(R2, [0, 0, 0]*1E-3), ...
                plux(R6, [0, 0, 0]*1E-3), ...
                plux(eye(3), [0, 0, 0]*1E-3), ...
                plux(eye(3), [-sin(20/180*pi)*42, 0, -cos(20/180*pi)*42]*1E-3), ...
                };


% import tello inertial pararmeters from solidworks-generated data files
inertial = fcn_import_params_solidworks('../v3/models/tello_params/inertial_*.txt');


% convert to rigid-body-inertia (rbi) 
% IMPORTANT: rotors' inertia are void
for idx_body = 1:6
    robot.I{idx_body} = mcI( inertial.mass{idx_body}, ...
                                 inertial.CoM{idx_body}', ...
                                 inertial.Ic{idx_body});
    if idx_body > 1      % repeated (right-hand-side) structural limbs
        robot.I{idx_body+10} = mcI( inertial.mass{idx_body}, ...
                                     inertial.CoM{idx_body}', ...
                                     inertial.Ic{idx_body});
    end
end

for idx_body = 1:6
    robot.I{idx_body} = mcI( inertial.mass{idx_body}, ...
                                 inertial.CoM{idx_body}', ...
                                 inertial.Ic{idx_body});
end

for idx_body = 2:6
    % repeated (right-hand-side) structural limbs (bodynum 12~16)
    robot.I{idx_body+10} = mcI( inertial.mass{idx_body}, ...
        inertial.CoM{idx_body}', ...
        inertial.Ic{idx_body});
end




end
