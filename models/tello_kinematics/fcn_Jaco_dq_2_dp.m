function J = fcn_Jaco_dq_2_dp(q)
% differential kinematics (inverse direction)
% J: Jacobian that maps from joint velocities to actuator velocities
% dq --> dp, 5x5 matrix
% dp: vector of actuator (angular) velocities - after reduction (5x1)
% dq: vector of joint (angular) velocities (5x1)


p_ = fcn_ik_q_2_p(q);
alpha_ = fcn_q5_2_alpha(q(5));
beta_ = fcn_q5_2_beta(q(5));
lambda_ = fcn_alphabeta2_lambda(alpha_, beta_);

J = zeros(5,5);
J(1, 1) = 1;
J(2, 2) = ...
    -(196*sin(q(2)) - 399*cos(q(2)) - 224*cos(q(2))*sin(p_(2)) + ...
    224*cos(q(2))*sin(q(3)) + 456*sin(q(2))*sin(q(3)) + ...
    256*sin(p_(2))*sin(q(2))*sin(q(3)))/(456*cos(p_(2)) - ...
    224*cos(p_(2))*sin(q(2)) + 256*cos(q(3))*sin(p_(2)) - ...
    256*cos(p_(2))*cos(q(2))*sin(q(3)));
J(2, 3) = ...
    (57*cos(q(2))*cos(q(3)) - 32*cos(p_(2))*sin(q(3)) - 28*cos(q(3))*sin(q(2)) + ...
    32*cos(q(2))*cos(q(3))*sin(p_(2)))/(57*cos(p_(2)) - 28*cos(p_(2))*sin(q(2)) + ...
    32*cos(q(3))*sin(p_(2)) - 32*cos(p_(2))*cos(q(2))*sin(q(3)));
J(3, 2) = ...
    -(399*cos(q(2)) + 196*sin(q(2)) + 224*cos(q(2))*sin(p_(3)) - ...
    224*cos(q(2))*sin(q(3)) + 456*sin(q(2))*sin(q(3)) + ...
    256*sin(p_(3))*sin(q(2))*sin(q(3)))/(456*cos(p_(3)) + ...
    224*cos(p_(3))*sin(q(2)) + 256*cos(q(3))*sin(p_(3)) - ...
    256*cos(p_(3))*cos(q(2))*sin(q(3)));
J(3, 3) = ...
    (57*cos(q(2))*cos(q(3)) - 32*cos(p_(3))*sin(q(3)) + 28*cos(q(3))*sin(q(2)) + ...
    32*cos(q(2))*cos(q(3))*sin(p_(3)))/(57*cos(p_(3)) + 28*cos(p_(3))*sin(q(2)) + ...
    32*cos(q(3))*sin(p_(3)) - 32*cos(p_(3))*cos(q(2))*sin(q(3)));
J(4, 4) = 1;
J(4, 5) = 1/lambda_;
J(5, 4) = 1;
J(5, 5) = -1/lambda_;

% [1, 1/lambda; 1, -1/lambda];